# -*- coding: utf-8 -*-
"""Sentiment Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19KH2zQhadmY3DlvjfjUxUQpYzZo1IWRO
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import tkinter
from tkinter import *
import warnings
warnings.filterwarnings('ignore')

plt.style.use('ggplot')

import nltk
nltk.download('punkt')
nltk.download('wordnet')
nltk.download('averaged_perceptron_tagger')
nltk.download('maxent_ne_chunker')
nltk.download('words')
nltk.download('vader_lexicon')

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/collab data/Reviews.csv')
print(df.shape)
df = df.head(500)
print(df.shape)

df.head()

"""## Exploratory Data Analysis"""

ax = df['Score'].value_counts().sort_index().plot(kind='bar',
                                                  title = 'Count of Reviews by Stars',
                                                  figsize = (10,5))
ax.set_xlabel('Review Stars')
plt.show()

"""## NLTK"""

example = df['Text'][50]
print(example)

tokens = nltk.word_tokenize(example)
tokens[:10]

tagged = nltk.pos_tag(tokens)
tagged[:10]

entities = nltk.chunk.ne_chunk(tagged)
entities.pprint()

"""## Vader Sentiment Scoring"""

from nltk.sentiment import SentimentIntensityAnalyzer
from tqdm.notebook import tqdm

sia = SentimentIntensityAnalyzer()

sia.polarity_scores('I am so happy')

sia.polarity_scores('This is the worst thing ever')

sia.polarity_scores(example)

# Run the polarity score on the entire dataset
res = {}
for i, row in tqdm(df.iterrows(), total = len(df)):
  text = row['Text']
  myid = row['Id']
  res[myid] = sia.polarity_scores(text)

res

vaders = pd.DataFrame(res).T
vaders = vaders.reset_index().rename(columns={'index': 'Id'})
vaders = vaders.merge(df, how = 'left')

ax = sns.barplot(data = vaders, x = 'Score', y = 'compound')
ax.set_title('Compund Score by Amazon Star Review')
plt.show()

fig, axs = plt.subplots(1, 3, figsize = (15,5))
sns.barplot(data = vaders, x = 'Score', y = 'pos', ax = axs[0])
sns.barplot(data = vaders, x = 'Score', y = 'neg', ax = axs[1])
sns.barplot(data = vaders, x = 'Score', y = 'neu', ax = axs[2])
axs[0].set_title('Positive')
axs[1].set_title('Negative')
axs[2].set_title('Neutral')
plt.tight_layout()
plt.show()

"""Roberta Pretrained Model"""

from transformers import AutoTokenizer
from transformers import AutoModelForSequenceClassification
from scipy.special import softmax

MODEL = f"cardiffnlp/twitter-roberta-base-sentiment"
tokenizer = AutoTokenizer.from_pretrained(MODEL)
model = AutoModelForSequenceClassification.from_pretrained(MODEL)

# Run roberta model
encoded_text = tokenizer(example, return_tensors = 'pt')
output = model(**encoded_text)
scores = output[0][0].detach().numpy()
scores = softmax(scores)
scores_dict = {
    'roberta_neg' : scores[0],
    'roberta_neu' : scores[1],
    'roberta_pos' : scores[2]
}
print(scores_dict)

def polarity_scores_roberta(example):
  encoded_text = tokenizer(example, return_tensors = 'pt')
  output = model(**encoded_text)
  scores = output[0][0].detach().numpy()
  scores = softmax(scores)
  scores_dict = {
          'roberta_neg' : scores[0],
          'roberta_neu' : scores[1],
          'roberta_pos' : scores[2]
          }
  return scores_dict

res = {}
for i, row in tqdm(df.iterrows(), total = len(df)):
  try:
    text = row['Text']
    myid = row['Id']
    vader_result = sia.polarity_scores(text)
    vader_result_rename = {}
    for key, value in vader_result.items():
      vader_result_rename[f"vader_{key}"] = value
    roberta_result = polarity_scores_roberta(text)
    both = {**vader_result_rename, **roberta_result}
    res[myid] = both
  except RuntimeError:
    print(f'Broke for id {myid}')

both

results_df = pd.DataFrame(res).T
results_df = results_df.reset_index().rename(columns={'index': 'Id'})
results_df = results_df.merge(df, how = 'left')

results_df.head()

"""## Comparing Scores"""

results_df.columns

sns.pairplot(data = results_df,
             vars =['vader_neg', 'vader_pos', 'vader_neu',
                    'roberta_neg', 'roberta_pos', 'roberta_neu'],
             hue = 'Score',
             palette  = 'tab10')
plt.show()

"""## Review Examples"""

results_df.query('Score == 1') \
  .sort_values('roberta_pos', ascending = False)['Text'].values[0]

results_df.query('Score == 1') \
  .sort_values('vader_pos', ascending = False)['Text'].values[0]

# negative sentiment 5 star review
results_df.query('Score == 5') \
  .sort_values('roberta_neg', ascending = False)['Text'].values[0]

results_df.query('Score == 5') \
  .sort_values('vader_neg', ascending = False)['Text'].values[0]

"""## Transformers pipeline"""

from transformers import pipeline

sent_pipeline = pipeline('sentiment-analysis')

sent_pipeline('I love sentiment analysis!')

